import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Box,
  Typography,
  CircularProgress,
  Alert,
  Tabs,
  Tab,
  IconButton,
  Tooltip,
  Paper,
} from '@mui/material';
import {
  AutoAwesome as AutoAwesomeIcon,
  Close as CloseIcon,
  ContentCopy as ContentCopyIcon,
  Code as CodeIcon,
  Description as DescriptionIcon,
} from '@mui/icons-material';

interface JsonSchemaBuilderProps {
  open: boolean;
  onClose: () => void;
  onSelect: (schema: string) => void;
  initialDescription?: string;
  initialSchema?: string;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel({ children, value, index }: TabPanelProps) {
  return (
    <div role="tabpanel" hidden={value !== index}>
      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}
    </div>
  );
}

export default function JsonSchemaBuilder({
  open,
  onClose,
  onSelect,
  initialDescription = '',
  initialSchema = ''
}: JsonSchemaBuilderProps) {
  const [tabValue, setTabValue] = useState(0);
  const [description, setDescription] = useState(initialDescription);
  const [generatedSchema, setGeneratedSchema] = useState(initialSchema);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState('');

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const generateSchema = async () => {
    if (!description.trim()) {
      setError('Please provide a description of the JSON structure you need.');
      return;
    }

    setIsGenerating(true);
    setError('');

    try {
      // Get OpenAI API key from integrations
      const integrations = JSON.parse(localStorage.getItem('integrations') || '[]');
      const openaiIntegration = integrations.find((int: any) => int.type === 'openai' && int.status === 'connected');
      
      if (!openaiIntegration) {
        throw new Error('OpenAI integration not found. Please configure an OpenAI integration first.');
      }

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiIntegration.config.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: `You are a JSON Schema expert. Generate a valid JSON Schema based on the user's description. 

Guidelines:
- Create a JSON Schema (draft-07 compatible)
- Include proper types, required fields, and descriptions
- Make it practical and usable for API responses or data validation
- Include examples where helpful
- Use clear, descriptive property names
- Return ONLY the JSON schema, no additional text or explanation
- Ensure the schema is valid and well-structured`
            },
            {
              role: 'user',
              content: `Create a JSON schema for: ${description}`
            }
          ],
          temperature: 0.3,
          max_completion_tokens: 16384,
          response_format: { type: 'json_object' }
        })
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      const schemaContent = data.choices[0]?.message?.content;

      if (!schemaContent) {
        throw new Error('No schema generated by AI');
      }

      // Parse to validate it's valid JSON
      JSON.parse(schemaContent);
      
      // Format the JSON nicely
      const formattedSchema = JSON.stringify(JSON.parse(schemaContent), null, 2);
      setGeneratedSchema(formattedSchema);
      setTabValue(1); // Switch to schema tab

    } catch (error) {
      console.error('Failed to generate schema:', error);
      setError(error instanceof Error ? error.message : 'Failed to generate schema');
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedSchema);
  };

  const handleSelect = () => {
    onSelect(generatedSchema);
    onClose();
  };

  const validateSchema = () => {
    try {
      JSON.parse(generatedSchema);
      return true;
    } catch {
      return false;
    }
  };

  const exampleDescriptions = [
    "A user profile with name, email, preferences, and settings",
    "An e-commerce product with title, price, description, categories, and inventory",
    "A blog post with title, content, author, tags, and publication date",
    "A customer feedback response with rating, comment, and metadata",
    "A task management item with status, priority, assignee, and due date"
  ];

  return (
    <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
      <DialogTitle>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <CodeIcon color="primary" />
            <Typography variant="h6">JSON Schema Builder</Typography>
          </Box>
          <IconButton onClick={onClose} size="small">
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            <strong>Describe your JSON structure</strong> and let AI generate a proper JSON Schema for validation and documentation.
          </Typography>
        </Alert>

        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
          <Tabs value={tabValue} onChange={handleTabChange}>
            <Tab icon={<DescriptionIcon />} label="Description" />
            <Tab icon={<CodeIcon />} label="Generated Schema" />
          </Tabs>
        </Box>

        <TabPanel value={tabValue} index={0}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            <TextField
              label="Describe your JSON structure"
              multiline
              rows={6}
              fullWidth
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Describe the data structure you need. For example: 'A user profile with name, email, age, and an array of preferences including theme and notifications'"
              variant="outlined"
            />

            <Box>
              <Typography variant="subtitle2" gutterBottom>
                Example descriptions:
              </Typography>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                {exampleDescriptions.map((example, index) => (
                  <Paper
                    key={index}
                    sx={{ 
                      p: 2, 
                      cursor: 'pointer', 
                      '&:hover': { backgroundColor: 'action.hover' },
                      border: '1px solid',
                      borderColor: 'divider'
                    }}
                    onClick={() => setDescription(example)}
                  >
                    <Typography variant="body2" color="text.secondary">
                      {example}
                    </Typography>
                  </Paper>
                ))}
              </Box>
            </Box>

            {error && (
              <Alert severity="error">
                {error}
              </Alert>
            )}

            <Button
              variant="contained"
              startIcon={isGenerating ? <CircularProgress size={16} /> : <AutoAwesomeIcon />}
              onClick={generateSchema}
              disabled={isGenerating || !description.trim()}
              size="large"
            >
              {isGenerating ? 'Generating Schema...' : 'Generate JSON Schema'}
            </Button>
          </Box>
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="h6">Generated Schema</Typography>
              {generatedSchema && (
                <Tooltip title="Copy to clipboard">
                  <IconButton onClick={copyToClipboard}>
                    <ContentCopyIcon />
                  </IconButton>
                </Tooltip>
              )}
            </Box>

            {generatedSchema ? (
              <Box>
                <TextField
                  multiline
                  rows={20}
                  fullWidth
                  value={generatedSchema}
                  onChange={(e) => setGeneratedSchema(e.target.value)}
                  variant="outlined"
                  sx={{ 
                    '& .MuiInputBase-input': { 
                      fontFamily: 'monospace',
                      fontSize: '0.875rem'
                    }
                  }}
                />
                
                {!validateSchema() && (
                  <Alert severity="warning" sx={{ mt: 2 }}>
                    Invalid JSON syntax. Please fix the schema before using it.
                  </Alert>
                )}
              </Box>
            ) : (
              <Paper sx={{ p: 4, textAlign: 'center', backgroundColor: 'grey.50' }}>
                <Typography variant="body1" color="text.secondary">
                  No schema generated yet. Switch to the Description tab to create one.
                </Typography>
              </Paper>
            )}
          </Box>
        </TabPanel>
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose}>
          Cancel
        </Button>
        <Button 
          variant="contained" 
          onClick={handleSelect}
          disabled={!generatedSchema || !validateSchema()}
        >
          Use This Schema
        </Button>
      </DialogActions>
    </Dialog>
  );
}